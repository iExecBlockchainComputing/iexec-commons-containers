plugins {
    id 'java-library'
    id 'io.freefair.lombok' version '8.10.2'
    id 'jacoco'
    id 'org.sonarqube' version '5.1.0.4882'
    id 'maven-publish'
}

group = 'com.iexec.commons'

ext {
    gitTag = 'git tag --points-at HEAD'.execute().text.trim()
    dockerJavaVersion = '3.4.1'
}

if (gitTag.isEmpty()) {
    version += '-NEXT-SNAPSHOT'
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url 'https://docker-regis-adm.iex.ec/repository/maven-public/'
        credentials {
            username nexusUser
            password nexusPassword
        }
    }
}

// java-library plugin defines 'api' configuration
// 'api' configuration allows to expose dependencies with 'compile' scope in pom
// 'implementation' configuration allows to expose dependencies with 'runtime' scope in pom
dependencies {
    implementation platform('org.springframework.boot:spring-boot-dependencies:3.3.8')

    // docker
    api "com.github.docker-java:docker-java:${dockerJavaVersion}"
    // Using zerodep until docker client stops blocking after having called
    // listContainersCmd() over httpclient5
    implementation "com.github.docker-java:docker-java-transport-zerodep:${dockerJavaVersion}"

    // apache commons-lang3
    implementation 'org.apache.commons:commons-lang3:3.12.0'

    // args utils
    implementation 'org.apache.maven.shared:maven-shared-utils:3.4.2'
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    withJavadocJar()
    withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs.add('-parameters')
    options.compilerArgs.add('-Xlint:all')
}

testing {
    suites {
        test {
            useJUnitJupiter()
            dependencies {
                implementation 'org.assertj:assertj-core'
                implementation 'org.awaitility:awaitility'
                implementation 'org.mockito:mockito-junit-jupiter'
                // spring-test for ReflectionTestUtils
                implementation 'org.springframework:spring-test'
                // spring-boot-test to capture test outputs
                implementation 'org.springframework.boot:spring-boot-test'
                // logback
                runtimeOnly 'ch.qos.logback:logback-classic'
            }
        }
    }
}

tasks.withType(Test).configureEach {
    finalizedBy jacocoTestReport
}

test {
    // systemProperties System.properties
    reports {
        junitXml.required = true
        html.required = true
    }
}

tasks.register('itest') {
    group 'Verification'
    description 'Runs the integration tests.'
}

// sonarqube code coverage requires jacoco XML report
jacocoTestReport {
    reports {
        xml.required = true
    }
}
tasks.sonarqube.dependsOn tasks.jacocoTestReport

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            credentials {
                username nexusUser
                password nexusPassword
            }
            url = project.hasProperty('nexusUrl') ? nexusUrl : ''
        }
    }
}
