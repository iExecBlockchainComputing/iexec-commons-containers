plugins {
    id 'java-library'
    id 'jacoco'
    id 'org.sonarqube' version '4.2.1.3168'
    id 'maven-publish'
    id 'io.freefair.lombok' version '8.2.2'
}

group = 'com.iexec.commons'

ext {
    gitBranch = 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()

    dockerJavaVersion = '3.3.4'
}

if (gitBranch != 'main' && gitBranch != 'master' && !(gitBranch ==~ '(release|hotfix|support)/.*')) {
    version += '-NEXT-SNAPSHOT'
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url 'https://docker-regis-adm.iex.ec/repository/maven-public/'
        credentials {
            username nexusUser
            password nexusPassword
        }
    }
}

// java-library plugin defines 'api' configuration
// 'api' configuration allows to expose dependencies with 'compile' scope in pom
// 'implementation' configuration allows to expose dependencies with 'runtime' scope in pom
dependencies {
    implementation platform('org.springframework.boot:spring-boot-dependencies:2.7.14')

    // docker
    api "com.github.docker-java:docker-java:${dockerJavaVersion}"
    // Using zerodep until docker client stops blocking after having called
    // listContainersCmd() over httpclient5
    implementation "com.github.docker-java:docker-java-transport-zerodep:${dockerJavaVersion}"

    // apache commons-lang3
    implementation 'org.apache.commons:commons-lang3:3.12.0'

    // args utils
    implementation 'org.apache.maven.shared:maven-shared-utils:3.4.2'

    // tests
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
    testImplementation 'org.mockito:mockito-junit-jupiter'
    testImplementation 'org.assertj:assertj-core'
    // spring-boot-test to capture test outputs
    testImplementation 'org.springframework.boot:spring-boot-test'
    // spring-test for ReflectionTestUtils
    testImplementation 'org.springframework:spring-test'
    testImplementation 'org.awaitility:awaitility'
    // logback
    testRuntimeOnly 'ch.qos.logback:logback-classic'
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
    sourceCompatibility = "11"
    targetCompatibility = "11"
    withJavadocJar()
    withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += '-Xlint:all'
}

tasks.withType(Test).configureEach {
    finalizedBy jacocoTestReport
    useJUnitPlatform()
}

test {
    reports {
        junitXml.required = true
        html.required = true
    }
}

tasks.register('itest') {
    group 'Verification'
    description 'Runs the integration tests.'
}

// sonarqube code coverage requires jacoco XML report
jacocoTestReport {
    reports {
        xml.required = true
    }
}
tasks.sonarqube.dependsOn tasks.jacocoTestReport

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            credentials {
                username nexusUser
                password nexusPassword
            }
            url = project.hasProperty('nexusUrl') ? nexusUrl : ''
        }
    }
}
